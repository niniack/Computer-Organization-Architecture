$date
	Tue Oct 29 21:42:29 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_level_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module tl $end
$var wire 32 # ALUin1 [31:0] $end
$var wire 1 $ Branch $end
$var wire 1 % PCSrc $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 1 " rst $end
$var wire 32 ( t0 [31:0] $end
$var wire 32 ) t1 [31:0] $end
$var wire 32 * jumpAddress_ID_EX [31:0] $end
$var wire 32 + jumpAddress [31:0] $end
$var wire 1 , Stall_Data_Hazard $end
$var wire 32 - SextOut_ID_EX [31:0] $end
$var wire 32 . SextOut [31:0] $end
$var wire 28 / SLLJOut [27:0] $end
$var wire 32 0 SLLBOut [31:0] $end
$var wire 5 1 RegisterRt_IF_ID [4:0] $end
$var wire 5 2 RegisterRt_ID_EX [4:0] $end
$var wire 5 3 RegisterRs_IF_ID [4:0] $end
$var wire 5 4 RegisterRs_ID_EX [4:0] $end
$var wire 1 5 RegWrite_MEM_WB $end
$var wire 1 6 RegWrite_ID_EX $end
$var wire 1 7 RegWrite_EX_MEM $end
$var wire 1 8 RegWrite $end
$var wire 1 9 RegDst_ID_EX $end
$var wire 1 : RegDst $end
$var wire 32 ; RFout2_ID_EX [31:0] $end
$var wire 32 < RFout2_EX_MEM [31:0] $end
$var wire 32 = RFout2 [31:0] $end
$var wire 32 > RFout1_ID_EX [31:0] $end
$var wire 32 ? RFout1 [31:0] $end
$var wire 5 @ RFWriteReg_MEM_WB [4:0] $end
$var wire 5 A RFWriteReg_EX_MEM [4:0] $end
$var wire 5 B RFWriteReg [4:0] $end
$var wire 32 C RFWriteData [31:0] $end
$var wire 32 D PCout [31:0] $end
$var wire 32 E PCnext_IF_ID [31:0] $end
$var wire 32 F PCnext_ID_EX [31:0] $end
$var wire 32 G PCnext [31:0] $end
$var wire 32 H PCbranch_EX_MEM [31:0] $end
$var wire 32 I PCbranch [31:0] $end
$var wire 32 J PCJumpMUXout [31:0] $end
$var wire 32 K PCBranchMUXout [31:0] $end
$var wire 1 L MemtoReg_MEM_WB $end
$var wire 1 M MemtoReg_ID_EX $end
$var wire 1 N MemtoReg_EX_MEM $end
$var wire 1 O MemtoReg $end
$var wire 1 P MemWrite_ID_EX $end
$var wire 1 Q MemWrite_EX_MEM $end
$var wire 1 R MemWrite $end
$var wire 1 S MemRead_ID_EX $end
$var wire 1 T MemRead_EX_MEM $end
$var wire 1 U MemRead $end
$var wire 1 V Jump $end
$var wire 32 W IMout_IF_ID [31:0] $end
$var wire 32 X IMout [31:0] $end
$var wire 5 Y IMSelTwo_ID_EX [4:0] $end
$var wire 5 Z IMSelOne_ID_EX [4:0] $end
$var wire 32 [ DMout_MEM_WB [31:0] $end
$var wire 32 \ DMout [31:0] $end
$var wire 1 ] BranchCtrl_ID_EX $end
$var wire 1 ^ BranchCtrl_EX_MEM $end
$var wire 1 _ BranchCtrl $end
$var wire 1 ` ALUzero_EX_MEM $end
$var wire 1 a ALUzero $end
$var wire 32 b ALUout_MEM_WB [31:0] $end
$var wire 32 c ALUout_EX_MEM [31:0] $end
$var wire 32 d ALUout [31:0] $end
$var wire 32 e ALUin2 [31:0] $end
$var wire 1 f ALUSrc_ID_EX $end
$var wire 1 g ALUSrc $end
$var wire 2 h ALUOp_ID_EX [1:0] $end
$var wire 2 i ALUOp [1:0] $end
$var wire 3 j ALUControl [2:0] $end
$var reg 32 k PCin [31:0] $end
$scope module alu $end
$var wire 1 ! clk $end
$var wire 32 l inA [31:0] $end
$var wire 1 a zero $end
$var wire 32 m inB [31:0] $end
$var wire 3 n funct [2:0] $end
$var reg 32 o out [31:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 6 p funct [5:0] $end
$var wire 2 q ALUOp [1:0] $end
$var reg 3 r ALUControl [2:0] $end
$var reg 6 s _funcOverride [5:0] $end
$upscope $end
$scope module alumux $end
$var wire 1 f select $end
$var wire 32 t out [31:0] $end
$var wire 32 u inB [31:0] $end
$var wire 32 v inA [31:0] $end
$upscope $end
$scope module ctrl $end
$var wire 6 w opcode [5:0] $end
$var wire 1 , Stall_Data_Hazard $end
$var reg 2 x ALUOp [1:0] $end
$var reg 1 g ALUSrc $end
$var reg 1 _ Branch $end
$var reg 1 V Jump $end
$var reg 1 U MemRead $end
$var reg 1 R MemWrite $end
$var reg 1 O MemtoReg $end
$var reg 1 : RegDst $end
$var reg 1 8 RegWrite $end
$upscope $end
$scope module dm $end
$var wire 1 ! clk $end
$var wire 32 y writeData [31:0] $end
$var wire 32 z readData [31:0] $end
$var wire 1 Q memWrite $end
$var wire 1 T memRead $end
$var wire 32 { address [31:0] $end
$upscope $end
$scope module hzd $end
$var wire 5 | RegisterRs_IF_ID [4:0] $end
$var wire 5 } RegisterRt_IF_ID [4:0] $end
$var wire 5 ~ RegisterRt_ID_EX [4:0] $end
$var wire 5 !" RegisterRs_ID_EX [4:0] $end
$var wire 1 6 RegWrite_ID_EX $end
$var wire 1 7 RegWrite_EX_MEM $end
$var wire 5 "" RFWriteReg_EX_MEM [4:0] $end
$var wire 1 S MemRead_ID_EX $end
$var reg 1 , Stall_Data_Hazard $end
$upscope $end
$scope module im $end
$var wire 1 ! clk $end
$var wire 32 #" readAddress [31:0] $end
$var reg 32 $" instruction [31:0] $end
$upscope $end
$scope module immux $end
$var wire 1 9 select $end
$var wire 5 %" out [4:0] $end
$var wire 5 &" inB [4:0] $end
$var wire 5 '" inA [4:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 32 (" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 )" out [31:0] $end
$upscope $end
$scope module pcbmux $end
$var wire 1 $ select $end
$var wire 32 *" out [31:0] $end
$var wire 32 +" inB [31:0] $end
$var wire 32 ," inA [31:0] $end
$upscope $end
$scope module pcjmux $end
$var wire 32 -" inA [31:0] $end
$var wire 32 ." inB [31:0] $end
$var wire 1 % select $end
$var wire 32 /" out [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 0" readRegisterOne [4:0] $end
$var wire 5 1" readRegisterTwo [4:0] $end
$var wire 1 " rst $end
$var wire 5 2" writeRegister [4:0] $end
$var wire 1 5 writeEnable $end
$var wire 32 3" writeData [31:0] $end
$var reg 32 4" readDataOne [31:0] $end
$var reg 32 5" readDataTwo [31:0] $end
$var integer 32 6" i [31:0] $end
$upscope $end
$scope module rfmux $end
$var wire 1 L select $end
$var wire 32 7" out [31:0] $end
$var wire 32 8" inB [31:0] $end
$var wire 32 9" inA [31:0] $end
$upscope $end
$scope module s1_im_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 32 :" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 ;" out [31:0] $end
$upscope $end
$scope module s1_pcnext_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 32 <" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 =" out [31:0] $end
$upscope $end
$scope module s2_aluop_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 >" hold $end
$var wire 2 ?" in [1:0] $end
$var wire 1 " rst $end
$var reg 2 @" out [1:0] $end
$upscope $end
$scope module s2_alusrc_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 A" hold $end
$var wire 1 g in $end
$var wire 1 " rst $end
$var reg 1 f out $end
$upscope $end
$scope module s2_branchctrl_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 B" hold $end
$var wire 1 _ in $end
$var wire 1 " rst $end
$var reg 1 ] out $end
$upscope $end
$scope module s2_imselone_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 5 C" in [4:0] $end
$var wire 1 " rst $end
$var reg 5 D" out [4:0] $end
$upscope $end
$scope module s2_imseltwo_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 5 E" in [4:0] $end
$var wire 1 " rst $end
$var reg 5 F" out [4:0] $end
$upscope $end
$scope module s2_jumpaddr_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 32 G" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 H" out [31:0] $end
$upscope $end
$scope module s2_memread_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 I" hold $end
$var wire 1 U in $end
$var wire 1 " rst $end
$var reg 1 S out $end
$upscope $end
$scope module s2_memtoreg_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 J" hold $end
$var wire 1 O in $end
$var wire 1 " rst $end
$var reg 1 M out $end
$upscope $end
$scope module s2_memwrite_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 K" hold $end
$var wire 1 R in $end
$var wire 1 " rst $end
$var reg 1 P out $end
$upscope $end
$scope module s2_pcnext_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 32 L" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 M" out [31:0] $end
$upscope $end
$scope module s2_regdst_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 N" hold $end
$var wire 1 : in $end
$var wire 1 " rst $end
$var reg 1 9 out $end
$upscope $end
$scope module s2_registerRs_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 5 O" in [4:0] $end
$var wire 1 " rst $end
$var reg 5 P" out [4:0] $end
$upscope $end
$scope module s2_registerRt_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 5 Q" in [4:0] $end
$var wire 1 " rst $end
$var reg 5 R" out [4:0] $end
$upscope $end
$scope module s2_regwrite_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 S" hold $end
$var wire 1 8 in $end
$var wire 1 " rst $end
$var reg 1 6 out $end
$upscope $end
$scope module s2_rfone_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 32 T" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 U" out [31:0] $end
$upscope $end
$scope module s2_rftwo_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 32 V" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 W" out [31:0] $end
$upscope $end
$scope module s2_sext_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ' hold $end
$var wire 1 " rst $end
$var wire 32 X" in [31:0] $end
$var reg 32 Y" out [31:0] $end
$upscope $end
$scope module s3_aluout_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 Z" hold $end
$var wire 32 [" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 \" out [31:0] $end
$upscope $end
$scope module s3_aluzero_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ]" hold $end
$var wire 1 a in $end
$var wire 1 " rst $end
$var reg 1 ` out $end
$upscope $end
$scope module s3_branchctrl_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 ^" hold $end
$var wire 1 ] in $end
$var wire 1 " rst $end
$var reg 1 ^ out $end
$upscope $end
$scope module s3_memread_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 _" hold $end
$var wire 1 S in $end
$var wire 1 " rst $end
$var reg 1 T out $end
$upscope $end
$scope module s3_memtoreg_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 `" hold $end
$var wire 1 M in $end
$var wire 1 " rst $end
$var reg 1 N out $end
$upscope $end
$scope module s3_memwrite_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 a" hold $end
$var wire 1 P in $end
$var wire 1 " rst $end
$var reg 1 Q out $end
$upscope $end
$scope module s3_pcbranch_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 b" hold $end
$var wire 32 c" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module s3_regwrite_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 e" hold $end
$var wire 1 6 in $end
$var wire 1 " rst $end
$var reg 1 7 out $end
$upscope $end
$scope module s3_rftwo_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 f" hold $end
$var wire 32 g" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 h" out [31:0] $end
$upscope $end
$scope module s3_rfwritereg_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 i" hold $end
$var wire 5 j" in [4:0] $end
$var wire 1 " rst $end
$var reg 5 k" out [4:0] $end
$upscope $end
$scope module s4_aluout_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 l" hold $end
$var wire 32 m" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 n" out [31:0] $end
$upscope $end
$scope module s4_dmout_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 o" hold $end
$var wire 32 p" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 q" out [31:0] $end
$upscope $end
$scope module s4_memtoreg_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 r" hold $end
$var wire 1 N in $end
$var wire 1 " rst $end
$var reg 1 L out $end
$upscope $end
$scope module s4_regwrite_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 s" hold $end
$var wire 1 7 in $end
$var wire 1 " rst $end
$var reg 1 5 out $end
$upscope $end
$scope module s4_rfwritereg_pr $end
$var wire 1 & clear $end
$var wire 1 ! clk $end
$var wire 1 t" hold $end
$var wire 5 u" in [4:0] $end
$var wire 1 " rst $end
$var reg 5 v" out [4:0] $end
$upscope $end
$scope module sext $end
$var wire 16 w" in [15:0] $end
$var reg 32 x" out [31:0] $end
$upscope $end
$scope module sllb $end
$var wire 1 ! clk $end
$var wire 32 y" in [31:0] $end
$var reg 32 z" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
0t"
0s"
0r"
bx q"
bx p"
0o"
bx n"
bx m"
0l"
bx k"
bx j"
0i"
bx h"
bx g"
0f"
0e"
bx d"
bx c"
0b"
0a"
0`"
0_"
0^"
0]"
bx \"
bx ["
0Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
0S"
bx R"
bx Q"
bx P"
bx O"
0N"
bx M"
bx L"
0K"
0J"
0I"
bx H"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 G"
bx F"
bx E"
bx D"
bx C"
0B"
0A"
bx @"
bx ?"
0>"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
b11111 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
b0 ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
b0 k
bx j
bx i
bx h
xg
xf
bx e
bx d
bx c
bx b
xa
x`
x_
x^
x]
bx \
bx [
bx Z
bx Y
bx X
bx W
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
x9
x8
x7
x6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx00 /
bx .
bx -
x,
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 +
bx *
b0 )
b0 (
x'
z&
x%
x$
bx #
1"
0!
$end
#1
1a
b0 d
b0 o
b0 ["
0%
b100001001000000000000000000 +
b100001001000000000000000000 G"
b100001001000000000000000000 /
b0 .
b0 X"
b0 x"
b10 i
b10 x
b10 ?"
0V
0_
0R
0U
18
0O
0g
1:
b101111 s
b10 j
b10 n
b10 r
b0 I
b0 c"
b0 0
b0 z"
0'
0,
b10001101000010010000000000000000 X
b10001101000010010000000000000000 $"
b10001101000010010000000000000000 :"
b0 =
b0 5"
b0 V"
b0 ?
b0 4"
b0 T"
b100 J
b100 /"
b0 1
b0 }
b0 Q"
b0 3
b0 |
b0 O"
b0 w"
b0 1"
b0 0"
b0 w
b0 E"
b0 C"
b0 e
b0 m
b0 t
b0 p
b0 B
b0 %"
b0 j"
b0 \
b0 z
b0 p"
b0 K
b0 *"
b0 ."
0$
b0 C
b0 3"
b0 7"
b11111 6"
b0 W
b0 ;"
b0 E
b0 ="
b0 L"
0f
b0 h
b0 q
b0 @"
09
0]
0S
0P
06
0M
b0 #
b0 l
b0 >
b0 U"
b0 ;
b0 v
b0 W"
b0 g"
b0 -
b0 u
b0 Y"
b0 y"
b0 Z
b0 '"
b0 D"
b0 Y
b0 &"
b0 F"
b0 F
b0 M"
b0 *
b0 ,"
b0 H"
b0 4
b0 !"
b0 P"
b0 2
b0 ~
b0 R"
0^
0T
0Q
07
0N
b0 H
b0 +"
b0 d"
0`
b0 c
b0 {
b0 \"
b0 m"
b0 <
b0 y
b0 h"
b0 A
b0 ""
b0 k"
b0 u"
05
0L
b0 [
b0 8"
b0 q"
b0 b
b0 9"
b0 n"
b0 @
b0 2"
b0 v"
b100 G
b100 -"
b100 <"
b0 D
b0 #"
b0 )"
1!
#2
b100 k
b100 ("
0!
0"
#3
b100101001000000000000000100 +
b100101001000000000000000100 G"
b100101001000000000000000100 /
b1000 k
b1000 ("
b0 i
b0 x
b0 ?"
1U
1O
1g
0:
b100001001010010000000000000001 X
b100001001010010000000000000001 $"
b100001001010010000000000000001 :"
b111 j
b111 n
b111 r
b1000 J
b1000 /"
b100001001000000000000000000 K
b100001001000000000000000000 *"
b100001001000000000000000000 ."
b1001 1
b1001 }
b1001 Q"
b1000 3
b1000 |
b1000 O"
b1001 1"
b1000 0"
b100011 w
b1001 C"
b1000 G
b1000 -"
b1000 <"
b100 D
b100 #"
b100 )"
1`
b100001001000000000000000000 *
b100001001000000000000000000 ,"
b100001001000000000000000000 H"
16
19
b10 h
b10 q
b10 @"
b100 E
b100 ="
b100 L"
b10001101000010010000000000000000 W
b10001101000010010000000000000000 ;"
1!
#4
0!
#5
08
0g
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 +
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 G"
bx00 /
b1 .
b1 X"
b1 x"
b0 i
b0 x
b0 ?"
0U
0O
b1100 k
b1100 ("
b10 j
b10 n
b10 r
1'
1,
bx X
bx $"
bx :"
b1001 3
b1001 |
b1001 O"
b1 w"
b1001 0"
b1000 w
b1001 B
b1001 %"
b1001 j"
b100101001000000000000000100 K
b100101001000000000000000100 *"
b100101001000000000000000100 ."
b1100 J
b1100 /"
b100001001010010000000000000001 W
b100001001010010000000000000001 ;"
b1000 E
b1000 ="
b1000 L"
1f
b0 h
b0 q
b0 @"
09
1S
1M
b1001 Z
b1001 '"
b1001 D"
b100 I
b100 c"
b100 F
b100 M"
b100101001000000000000000100 *
b100101001000000000000000100 ,"
b100101001000000000000000100 H"
b1000 4
b1000 !"
b1000 P"
b1001 2
b1001 ~
b1001 R"
17
b1100 G
b1100 -"
b1100 <"
b1000 D
b1000 #"
b1000 )"
1!
#6
0!
#7
b10000 J
b10000 /"
b101 \
b101 z
b101 p"
b10000 G
b10000 -"
b10000 <"
b1100 D
b1100 #"
b1100 )"
15
b1001 A
b1001 ""
b1001 k"
b1001 u"
b100 H
b100 +"
b100 d"
1N
1T
0M
06
0S
0f
1!
#8
0!
#9
b10000 k
b10000 ("
b11 i
b11 x
b11 ?"
18
1g
b101 =
b101 5"
b101 V"
b101 ?
b101 4"
b101 T"
b101 )
0'
0,
b0 \
b0 z
b0 p"
b101 C
b101 3"
b101 7"
0T
07
0N
1L
b101 [
b101 8"
b101 q"
b1001 @
b1001 2"
b1001 v"
1!
#10
0!
#11
0a
b10100 k
b10100 ("
bx .
bx X"
bx x"
b100 0
b100 z"
b110 d
b110 o
b110 ["
bx =
bx 5"
bx V"
bx ?
bx 4"
bx T"
b10100 J
b10100 /"
b0 C
b0 3"
b0 7"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 K
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 *"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ."
b1 p
b1 e
b1 m
b1 t
bx 1
bx }
bx Q"
bx 3
bx |
bx O"
bx w"
bx 1"
bx 0"
bx w
bx E"
bx C"
b10100 G
b10100 -"
b10100 <"
b10000 D
b10000 #"
b10000 )"
b0 [
b0 8"
b0 q"
0L
05
b1001 4
b1001 !"
b1001 P"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 *
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ,"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 H"
b1100 I
b1100 c"
b1000 F
b1000 M"
b1 -
b1 u
b1 Y"
b1 y"
b101 ;
b101 v
b101 W"
b101 g"
b101 #
b101 l
b101 >
b101 U"
16
b11 h
b11 q
b11 @"
1f
b10000 E
b10000 ="
b10000 L"
bx W
bx ;"
1!
#12
0!
#13
xa
b11000 k
b11000 ("
bx d
bx o
bx ["
bx00 0
bx00 z"
bx e
bx m
bx t
bx p
bx B
bx %"
bx j"
b11000 J
b11000 /"
b10100 E
b10100 ="
b10100 L"
bx #
bx l
bx >
bx U"
bx ;
bx v
bx W"
bx g"
bx -
bx u
bx Y"
bx y"
bx Z
bx '"
bx D"
bx Y
bx &"
bx F"
bx I
bx c"
b10000 F
b10000 M"
bx 4
bx !"
bx P"
bx 2
bx ~
bx R"
17
b1100 H
b1100 +"
b1100 d"
0`
b110 c
b110 {
b110 \"
b110 m"
b101 <
b101 y
b101 h"
b11000 G
b11000 -"
b11000 <"
b10100 D
b10100 #"
b10100 )"
1!
#14
0!
#15
b11100 k
b11100 ("
b110 )
b11100 J
b11100 /"
b110 C
b110 3"
b110 7"
b11100 G
b11100 -"
b11100 <"
b11000 D
b11000 #"
b11000 )"
b110 b
b110 9"
b110 n"
15
bx A
bx ""
bx k"
bx u"
bx <
bx y
bx h"
bx c
bx {
bx \"
bx m"
x`
bx H
bx +"
bx d"
b10100 F
b10100 M"
b11000 E
b11000 ="
b11000 L"
1!
#16
0!
#17
b100000 k
b100000 ("
bx C
bx 3"
bx 7"
b100000 J
b100000 /"
b11100 E
b11100 ="
b11100 L"
b11000 F
b11000 M"
bx b
bx 9"
bx n"
bx @
bx 2"
bx v"
b100000 G
b100000 -"
b100000 <"
b11100 D
b11100 #"
b11100 )"
1!
#18
0!
#19
b100100 k
b100100 ("
b100100 J
b100100 /"
b100100 G
b100100 -"
b100100 <"
b100000 D
b100000 #"
b100000 )"
b11100 F
b11100 M"
b100000 E
b100000 ="
b100000 L"
1!
#20
0!
#21
b101000 k
b101000 ("
b101000 J
b101000 /"
b100100 E
b100100 ="
b100100 L"
b100000 F
b100000 M"
b101000 G
b101000 -"
b101000 <"
b100100 D
b100100 #"
b100100 )"
1!
#22
0!
#23
b101100 k
b101100 ("
b101100 J
b101100 /"
b101100 G
b101100 -"
b101100 <"
b101000 D
b101000 #"
b101000 )"
b100100 F
b100100 M"
b101000 E
b101000 ="
b101000 L"
1!
#24
0!
#25
b110000 k
b110000 ("
b110000 J
b110000 /"
b101100 E
b101100 ="
b101100 L"
b101000 F
b101000 M"
b110000 G
b110000 -"
b110000 <"
b101100 D
b101100 #"
b101100 )"
1!
#26
0!
#27
b110100 k
b110100 ("
b110100 J
b110100 /"
b110100 G
b110100 -"
b110100 <"
b110000 D
b110000 #"
b110000 )"
b101100 F
b101100 M"
b110000 E
b110000 ="
b110000 L"
1!
#28
0!
#29
b111000 k
b111000 ("
b111000 J
b111000 /"
b110100 E
b110100 ="
b110100 L"
b110000 F
b110000 M"
b111000 G
b111000 -"
b111000 <"
b110100 D
b110100 #"
b110100 )"
1!
#30
0!
#31
b111100 k
b111100 ("
b111100 J
b111100 /"
b111100 G
b111100 -"
b111100 <"
b111000 D
b111000 #"
b111000 )"
b110100 F
b110100 M"
b111000 E
b111000 ="
b111000 L"
1!
#32
0!
#33
b1000000 k
b1000000 ("
b1000000 J
b1000000 /"
b111100 E
b111100 ="
b111100 L"
b111000 F
b111000 M"
b1000000 G
b1000000 -"
b1000000 <"
b111100 D
b111100 #"
b111100 )"
1!
#34
0!
#35
b1000100 k
b1000100 ("
b1000100 J
b1000100 /"
b1000100 G
b1000100 -"
b1000100 <"
b1000000 D
b1000000 #"
b1000000 )"
b111100 F
b111100 M"
b1000000 E
b1000000 ="
b1000000 L"
1!
#36
0!
#37
b1001000 k
b1001000 ("
b1001000 J
b1001000 /"
b1000100 E
b1000100 ="
b1000100 L"
b1000000 F
b1000000 M"
b1001000 G
b1001000 -"
b1001000 <"
b1000100 D
b1000100 #"
b1000100 )"
1!
#38
0!
#39
b1001100 k
b1001100 ("
b1001100 J
b1001100 /"
b1001100 G
b1001100 -"
b1001100 <"
b1001000 D
b1001000 #"
b1001000 )"
b1000100 F
b1000100 M"
b1001000 E
b1001000 ="
b1001000 L"
1!
#40
0!
#41
b1010000 k
b1010000 ("
b1010000 J
b1010000 /"
b1001100 E
b1001100 ="
b1001100 L"
b1001000 F
b1001000 M"
b1010000 G
b1010000 -"
b1010000 <"
b1001100 D
b1001100 #"
b1001100 )"
1!
#42
0!
#43
b1010100 k
b1010100 ("
b1010100 J
b1010100 /"
b1010100 G
b1010100 -"
b1010100 <"
b1010000 D
b1010000 #"
b1010000 )"
b1001100 F
b1001100 M"
b1010000 E
b1010000 ="
b1010000 L"
1!
#44
0!
#45
b1011000 k
b1011000 ("
b1011000 J
b1011000 /"
b1010100 E
b1010100 ="
b1010100 L"
b1010000 F
b1010000 M"
b1011000 G
b1011000 -"
b1011000 <"
b1010100 D
b1010100 #"
b1010100 )"
1!
#46
0!
#47
b1011100 k
b1011100 ("
b1011100 J
b1011100 /"
b1011100 G
b1011100 -"
b1011100 <"
b1011000 D
b1011000 #"
b1011000 )"
b1010100 F
b1010100 M"
b1011000 E
b1011000 ="
b1011000 L"
1!
#48
0!
#49
b1100000 k
b1100000 ("
b1100000 J
b1100000 /"
b1011100 E
b1011100 ="
b1011100 L"
b1011000 F
b1011000 M"
b1100000 G
b1100000 -"
b1100000 <"
b1011100 D
b1011100 #"
b1011100 )"
1!
#50
0!
#51
b1100100 k
b1100100 ("
b1100100 J
b1100100 /"
b1100100 G
b1100100 -"
b1100100 <"
b1100000 D
b1100000 #"
b1100000 )"
b1011100 F
b1011100 M"
b1100000 E
b1100000 ="
b1100000 L"
1!
#52
0!
#53
b1101000 k
b1101000 ("
b1101000 J
b1101000 /"
b1100100 E
b1100100 ="
b1100100 L"
b1100000 F
b1100000 M"
b1101000 G
b1101000 -"
b1101000 <"
b1100100 D
b1100100 #"
b1100100 )"
1!
#54
0!
#55
b1101100 k
b1101100 ("
b1101100 J
b1101100 /"
b1101100 G
b1101100 -"
b1101100 <"
b1101000 D
b1101000 #"
b1101000 )"
b1100100 F
b1100100 M"
b1101000 E
b1101000 ="
b1101000 L"
1!
#56
0!
#57
b1110000 k
b1110000 ("
b1110000 J
b1110000 /"
b1101100 E
b1101100 ="
b1101100 L"
b1101000 F
b1101000 M"
b1110000 G
b1110000 -"
b1110000 <"
b1101100 D
b1101100 #"
b1101100 )"
1!
#58
0!
#59
b1110100 k
b1110100 ("
b1110100 J
b1110100 /"
b1110100 G
b1110100 -"
b1110100 <"
b1110000 D
b1110000 #"
b1110000 )"
b1101100 F
b1101100 M"
b1110000 E
b1110000 ="
b1110000 L"
1!
#60
0!
#61
b1111000 k
b1111000 ("
b1111000 J
b1111000 /"
b1110100 E
b1110100 ="
b1110100 L"
b1110000 F
b1110000 M"
b1111000 G
b1111000 -"
b1111000 <"
b1110100 D
b1110100 #"
b1110100 )"
1!
#62
0!
#63
b1111100 k
b1111100 ("
b1111100 J
b1111100 /"
b1111100 G
b1111100 -"
b1111100 <"
b1111000 D
b1111000 #"
b1111000 )"
b1110100 F
b1110100 M"
b1111000 E
b1111000 ="
b1111000 L"
1!
#64
0!
#65
b10000000 k
b10000000 ("
b10000000 J
b10000000 /"
b1111100 E
b1111100 ="
b1111100 L"
b1111000 F
b1111000 M"
b10000000 G
b10000000 -"
b10000000 <"
b1111100 D
b1111100 #"
b1111100 )"
1!
#66
0!
#67
b10000100 k
b10000100 ("
b10000100 J
b10000100 /"
b10000100 G
b10000100 -"
b10000100 <"
b10000000 D
b10000000 #"
b10000000 )"
b1111100 F
b1111100 M"
b10000000 E
b10000000 ="
b10000000 L"
1!
#68
0!
#69
b10001000 k
b10001000 ("
b10001000 J
b10001000 /"
b10000100 E
b10000100 ="
b10000100 L"
b10000000 F
b10000000 M"
b10001000 G
b10001000 -"
b10001000 <"
b10000100 D
b10000100 #"
b10000100 )"
1!
#70
0!
#71
b10001100 k
b10001100 ("
b10001100 J
b10001100 /"
b10001100 G
b10001100 -"
b10001100 <"
b10001000 D
b10001000 #"
b10001000 )"
b10000100 F
b10000100 M"
b10001000 E
b10001000 ="
b10001000 L"
1!
#72
0!
#73
b10010000 k
b10010000 ("
b10010000 J
b10010000 /"
b10001100 E
b10001100 ="
b10001100 L"
b10001000 F
b10001000 M"
b10010000 G
b10010000 -"
b10010000 <"
b10001100 D
b10001100 #"
b10001100 )"
1!
#74
0!
#75
b10010100 k
b10010100 ("
b10010100 J
b10010100 /"
b10010100 G
b10010100 -"
b10010100 <"
b10010000 D
b10010000 #"
b10010000 )"
b10001100 F
b10001100 M"
b10010000 E
b10010000 ="
b10010000 L"
1!
#76
0!
#77
b10011000 k
b10011000 ("
b10011000 J
b10011000 /"
b10010100 E
b10010100 ="
b10010100 L"
b10010000 F
b10010000 M"
b10011000 G
b10011000 -"
b10011000 <"
b10010100 D
b10010100 #"
b10010100 )"
1!
#78
0!
#79
b10011100 k
b10011100 ("
b10011100 J
b10011100 /"
b10011100 G
b10011100 -"
b10011100 <"
b10011000 D
b10011000 #"
b10011000 )"
b10010100 F
b10010100 M"
b10011000 E
b10011000 ="
b10011000 L"
1!
#80
0!
#81
b10100000 k
b10100000 ("
b10100000 J
b10100000 /"
b10011100 E
b10011100 ="
b10011100 L"
b10011000 F
b10011000 M"
b10100000 G
b10100000 -"
b10100000 <"
b10011100 D
b10011100 #"
b10011100 )"
1!
#82
0!
#83
b10100100 k
b10100100 ("
b10100100 J
b10100100 /"
b10100100 G
b10100100 -"
b10100100 <"
b10100000 D
b10100000 #"
b10100000 )"
b10011100 F
b10011100 M"
b10100000 E
b10100000 ="
b10100000 L"
1!
#84
0!
#85
b10101000 k
b10101000 ("
b10101000 J
b10101000 /"
b10100100 E
b10100100 ="
b10100100 L"
b10100000 F
b10100000 M"
b10101000 G
b10101000 -"
b10101000 <"
b10100100 D
b10100100 #"
b10100100 )"
1!
#86
0!
#87
b10101100 k
b10101100 ("
b10101100 J
b10101100 /"
b10101100 G
b10101100 -"
b10101100 <"
b10101000 D
b10101000 #"
b10101000 )"
b10100100 F
b10100100 M"
b10101000 E
b10101000 ="
b10101000 L"
1!
#88
0!
#89
b10110000 k
b10110000 ("
b10110000 J
b10110000 /"
b10101100 E
b10101100 ="
b10101100 L"
b10101000 F
b10101000 M"
b10110000 G
b10110000 -"
b10110000 <"
b10101100 D
b10101100 #"
b10101100 )"
1!
#90
0!
#91
b10110100 k
b10110100 ("
b10110100 J
b10110100 /"
b10110100 G
b10110100 -"
b10110100 <"
b10110000 D
b10110000 #"
b10110000 )"
b10101100 F
b10101100 M"
b10110000 E
b10110000 ="
b10110000 L"
1!
#92
0!
#93
b10111000 k
b10111000 ("
b10111000 J
b10111000 /"
b10110100 E
b10110100 ="
b10110100 L"
b10110000 F
b10110000 M"
b10111000 G
b10111000 -"
b10111000 <"
b10110100 D
b10110100 #"
b10110100 )"
1!
#94
0!
#95
b10111100 k
b10111100 ("
b10111100 J
b10111100 /"
b10111100 G
b10111100 -"
b10111100 <"
b10111000 D
b10111000 #"
b10111000 )"
b10110100 F
b10110100 M"
b10111000 E
b10111000 ="
b10111000 L"
1!
#96
0!
#97
b11000000 k
b11000000 ("
b11000000 J
b11000000 /"
b10111100 E
b10111100 ="
b10111100 L"
b10111000 F
b10111000 M"
b11000000 G
b11000000 -"
b11000000 <"
b10111100 D
b10111100 #"
b10111100 )"
1!
#98
0!
#99
b11000100 k
b11000100 ("
b11000100 J
b11000100 /"
b11000100 G
b11000100 -"
b11000100 <"
b11000000 D
b11000000 #"
b11000000 )"
b10111100 F
b10111100 M"
b11000000 E
b11000000 ="
b11000000 L"
1!
#100
0!
#101
b11001000 k
b11001000 ("
b11001000 J
b11001000 /"
b11000100 E
b11000100 ="
b11000100 L"
b11000000 F
b11000000 M"
b11001000 G
b11001000 -"
b11001000 <"
b11000100 D
b11000100 #"
b11000100 )"
1!
#102
0!
