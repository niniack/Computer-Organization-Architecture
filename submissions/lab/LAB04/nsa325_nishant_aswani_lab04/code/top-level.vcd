$date
	Wed Sep 25 00:52:05 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_level_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module tl $end
$var wire 32 # ALUin1 [31:0] $end
$var wire 32 $ SLLOut [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 % testReg1 [31:0] $end
$var wire 32 & testReg2 [31:0] $end
$var wire 32 ' SextOut [31:0] $end
$var wire 32 ( RFout2 [31:0] $end
$var wire 32 ) RFout1 [31:0] $end
$var wire 5 * RFWriteReg [4:0] $end
$var wire 32 + RFWriteData [31:0] $end
$var wire 32 , PCout [31:0] $end
$var wire 32 - PCnext [31:0] $end
$var wire 32 . PCbranch [31:0] $end
$var wire 32 / PCMUXout [31:0] $end
$var wire 32 0 IMout [31:0] $end
$var wire 32 1 DMout [31:0] $end
$var wire 1 2 ALUzero $end
$var wire 32 3 ALUout [31:0] $end
$var wire 32 4 ALUin2 [31:0] $end
$var reg 4 5 ALUControl [3:0] $end
$var reg 1 6 ALUSrc $end
$var reg 1 7 MemtoReg $end
$var reg 1 8 PCSrc $end
$var reg 32 9 PCin [31:0] $end
$var reg 1 : RegDst $end
$var reg 1 ; RegWrite $end
$var reg 1 < memRead $end
$var reg 1 = memWrite $end
$scope module alu $end
$var wire 1 ! clk $end
$var wire 4 > funct [3:0] $end
$var wire 32 ? inA [31:0] $end
$var wire 1 2 zero $end
$var wire 32 @ inB [31:0] $end
$var reg 32 A out [31:0] $end
$upscope $end
$scope module alumux $end
$var wire 1 6 select $end
$var wire 32 B out [31:0] $end
$var wire 32 C inB [31:0] $end
$var wire 32 D inA [31:0] $end
$upscope $end
$scope module dm $end
$var wire 32 E address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 < memRead $end
$var wire 1 = memWrite $end
$var wire 32 F writeData [31:0] $end
$var wire 32 G readData [31:0] $end
$upscope $end
$scope module im $end
$var wire 1 ! clk $end
$var wire 32 H readAddress [31:0] $end
$var reg 32 I instruction [31:0] $end
$upscope $end
$scope module immux $end
$var wire 5 J inA [4:0] $end
$var wire 5 K inB [4:0] $end
$var wire 1 : select $end
$var wire 5 L out [4:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 M in [31:0] $end
$var reg 32 N out [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 O inA [31:0] $end
$var wire 32 P inB [31:0] $end
$var wire 1 8 select $end
$var wire 32 Q out [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 R readRegisterOne [4:0] $end
$var wire 5 S readRegisterTwo [4:0] $end
$var wire 1 " rst $end
$var wire 1 ; writeEnable $end
$var wire 5 T writeRegister [4:0] $end
$var wire 32 U writeData [31:0] $end
$var reg 32 V readDataOne [31:0] $end
$var reg 32 W readDataTwo [31:0] $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module rfmux $end
$var wire 32 Y inA [31:0] $end
$var wire 32 Z inB [31:0] $end
$var wire 1 7 select $end
$var wire 32 [ out [31:0] $end
$upscope $end
$scope module sext $end
$var wire 16 \ in [15:0] $end
$var reg 32 ] out [31:0] $end
$upscope $end
$scope module sll $end
$var wire 1 ! clk $end
$var wire 32 ^ in [31:0] $end
$var reg 32 _ out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx _
bx ^
bx ]
bx \
b0 [
b0 Z
bx Y
b11111 X
bx W
bx V
b0 U
bx T
bx S
bx R
b0 Q
bx P
b0 O
bx N
b0 M
bx L
bx K
bx J
bx I
bx H
b0 G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
b10 >
0=
0<
0;
0:
b0 9
08
17
16
b10 5
bx 4
bx 3
x2
b0 1
bx 0
b0 /
bx .
bx -
bx ,
b0 +
bx *
bx )
bx (
bx '
b0 &
b10111010101010101010101010101101 %
bx $
bx #
1"
0!
$end
#1
b100 -
b0 ,
b0 H
b0 N
b1 &
b11111 X
1!
#2
0!
#3
12
b0 3
b0 A
b0 E
b0 Y
b0 .
b0 P
b0 $
b0 _
b0 4
b0 @
b0 B
b0 '
b0 C
b0 ]
b0 ^
b0 *
b0 L
b0 T
b0 (
b0 D
b0 F
b0 W
b0 #
b0 ?
b0 )
b0 V
b0 \
b0 S
b0 R
b0 K
b0 J
b1 &
b0 0
b0 I
b11111 X
1!
#4
0!
#5
b100 /
b100 M
b100 Q
b100 .
b100 P
b100 9
b100 O
1!
0"
#6
0!
#7
b1000 /
b1000 M
b1000 Q
b1000 .
b1000 P
b1000 9
b1000 O
b1000 -
b100 ,
b100 H
b100 N
1!
#8
0!
#9
02
b1100 /
b1100 M
b1100 Q
b1 3
b1 A
b1 E
b1 Y
b1100 .
b1100 P
b1100 9
b1100 O
1=
b11011110101011011101111010101101 (
b11011110101011011101111010101101 D
b11011110101011011101111010101101 F
b11011110101011011101111010101101 W
b1 #
b1 ?
b1 )
b1 V
b1010 *
b1010 L
b1010 T
b1010 S
b1001 R
b1010 J
b1100 -
b1000 ,
b1000 H
b1000 N
b10101101001010100000000000000000 0
b10101101001010100000000000000000 I
1!
#10
0!
#11
b11011110101011011101111010101101 +
b11011110101011011101111010101101 U
b11011110101011011101111010101101 [
b11011110101011011101111010101101 1
b11011110101011011101111010101101 G
b11011110101011011101111010101101 Z
b10000 /
b10000 M
b10000 Q
1<
0=
b10000 .
b10000 P
b10000 9
b10000 O
b1 (
b1 D
b1 F
b1 W
b1001 *
b1001 L
b1001 T
b1001 S
b1001 J
1;
b10001101001010010000000000000000 0
b10001101001010010000000000000000 I
b10000 -
b1100 ,
b1100 H
b1100 N
b11011110101011011101111010101101 %
1!
#12
0!
#13
bx00 $
bx00 _
x2
b0 +
b0 U
b0 [
bx 4
bx @
bx B
b10100 /
b10100 M
b10100 Q
b0 1
b0 G
b0 Z
bx '
bx C
bx ]
bx ^
bx 3
bx A
bx E
bx Y
bx .
bx P
b10100 9
b10100 O
0<
bx *
bx L
bx T
bx \
bx S
bx R
bx K
bx J
bx (
bx D
bx F
bx W
bx #
bx ?
bx )
bx V
b10100 -
b10000 ,
b10000 H
b10000 N
bx 0
bx I
b11011110101011011101111010101101 &
1!
#14
0!
#15
b11000 /
b11000 M
b11000 Q
b11000 9
b11000 O
b11000 -
b10100 ,
b10100 H
b10100 N
1!
#16
0!
#17
b11100 /
b11100 M
b11100 Q
b11100 9
b11100 O
b11100 -
b11000 ,
b11000 H
b11000 N
1!
#18
0!
#19
b100000 /
b100000 M
b100000 Q
b100000 9
b100000 O
b100000 -
b11100 ,
b11100 H
b11100 N
1!
#20
0!
#21
b100100 /
b100100 M
b100100 Q
b100100 9
b100100 O
b100100 -
b100000 ,
b100000 H
b100000 N
1!
#22
0!
#23
b101000 /
b101000 M
b101000 Q
b101000 9
b101000 O
b101000 -
b100100 ,
b100100 H
b100100 N
1!
#24
0!
#25
b101100 /
b101100 M
b101100 Q
b101100 9
b101100 O
b101100 -
b101000 ,
b101000 H
b101000 N
1!
#26
0!
#27
b110000 /
b110000 M
b110000 Q
b110000 9
b110000 O
b110000 -
b101100 ,
b101100 H
b101100 N
1!
#28
0!
#29
b110100 /
b110100 M
b110100 Q
b110100 9
b110100 O
b110100 -
b110000 ,
b110000 H
b110000 N
1!
#30
0!
#31
b111000 /
b111000 M
b111000 Q
b111000 9
b111000 O
b111000 -
b110100 ,
b110100 H
b110100 N
1!
#32
0!
#33
b111100 /
b111100 M
b111100 Q
b111100 9
b111100 O
b111100 -
b111000 ,
b111000 H
b111000 N
1!
#34
0!
#35
b1000000 /
b1000000 M
b1000000 Q
b1000000 9
b1000000 O
b1000000 -
b111100 ,
b111100 H
b111100 N
1!
